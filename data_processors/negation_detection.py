# exp setup
import pandas as pd
import spacy
from negspacy.negation import Negex
from negspacy.termsets import termset


class NegationDetection(object):
    def __init__(self, args):
        self.negex = Negex
        self.args = args
        self.negex_ann = list()
        self.nlp_model_sci = spacy.load("en_core_sci_sm")
        self.nlp_model_bc5cdr = spacy.load("en_ner_bc5cdr_md")
        self.clinical_termset = termset("en_clinical")

        self.preceding_negations = ["no", "free of", "normal", "clear", "unchanged", "not", "unremarkable",
                                    "stable",
                                    "maintained",
                                    "minimal", "mild"]  # confusion
        self.following_negations = ["clear", "intact", "normal", "stable", "unremarkable", "without",
                                    "satisfactory",
                                    "no", "well aerated", "unchanged", "not", "within limits", "normally aerated",
                                    "well-aerated", "maintained",
                                    "moderate", "minimal", "mild", "postsurgical changes"]  # confusion

        self.negations = ["clear", "intact", "normal", "stable", "unremarkable", "without", "satisfactory", "no",
                          "well aerated", "unchanged", "not", "free of", "within limits", "normally aerated",
                          "well-aerated",
                          "maintained",
                          "moderate", "minimal", "mild", "postsurgical changes"]  # confusion
        # self.entities = ["DISEASE", "TEST", "TREATMENT", "NEG_ENTITY"]
        self.clinical_termset.add_patterns({
            # "pseudo_negations": ["within normal limits", "stable"],
            "preceding_negations": self.negations,
            "following_negations": self.negations,
        })
        self.nlp_model_sci.add_pipe("negex", config={"neg_termset": self.clinical_termset.get_patterns()})
        self.nlp_model_bc5cdr.add_pipe("negex", config={"neg_termset": self.clinical_termset.get_patterns()})

    def to_csv(self):
        pd.DataFrame(self.negex_ann).to_csv('data/iu_xray/kaggle/negex_ann.csv', encoding='utf-8', index=False, sep=";")

    def lemmatize(self, text, nlp_model):
        doc = nlp_model(text)
        lem_note = [wd.lemma_ for wd in doc]
        return " ".join(lem_note)

    def get_negation(self, doc, model, ann_dict):
        for entity in doc.ents:
            ann_dict[model].append({"text": self.lemmatize(entity.text, self.nlp_model_sci), "negex": entity._.negex,
                                    "label": entity.label_})
        return ann_dict

    def generate_annotation_with_negation(self, text, r_id, rep_imp, is_normal):
        autogenerated_ontology = ""
        for sentence in text.split('.'):
            sentence = sentence.strip()
            if not sentence:
                continue
            model_entity_dict = dict(sci=list(dict()), bc5cdr=list(dict()))
            model_entity_dict = self.get_negation(self.nlp_model_sci(sentence), "sci", model_entity_dict)
            model_entity_dict = self.get_negation(self.nlp_model_bc5cdr(sentence), "bc5cdr",
                                                  model_entity_dict)

            bc5cdr_text = list()
            for bc5cdr_en_dict in model_entity_dict["bc5cdr"]:
                self.negex_ann.append(
                    {"id": r_id, "sentence": sentence, "type": rep_imp, "is_normal": is_normal, "model": "bc5cdr",
                     "text": bc5cdr_en_dict["text"], "is_negative": bc5cdr_en_dict["negex"],
                     "label": bc5cdr_en_dict["label"]})
                autogenerated_ontology += " <{}:{}{}>". \
                    format(bc5cdr_en_dict["label"], "!" if bc5cdr_en_dict["negex"] else "",
                           bc5cdr_en_dict["text"].replace(" ", "_"))
                bc5cdr_text.append(bc5cdr_en_dict["text"])

            for sci_en_dict in model_entity_dict["sci"]:
                if all(text not in sci_en_dict["text"] for text in bc5cdr_text):
                    self.negex_ann.append(
                        {"id": r_id, "sentence": sentence, "type": rep_imp, "is_normal": is_normal, "model": "sci",
                         "text": sci_en_dict["text"], "is_negative": sci_en_dict["negex"],
                         "label": sci_en_dict["label"]})
                    autogenerated_ontology += " <{}:{}{}>". \
                        format(sci_en_dict["label"], "!" if sci_en_dict["negex"] else "",
                               sci_en_dict["text"].replace(" ", "_"))
        return autogenerated_ontology
